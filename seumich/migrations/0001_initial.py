# -*- coding: utf-8 -*-
# Generated by Django 1.9 on 2016-04-28 17:59
from __future__ import unicode_literals

import advisingumich.mixins
import advisingumich.models
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Advisor',
            fields=[
                ('id', models.IntegerField(db_column=b'ADVSR_KEY', primary_key=True, serialize=False)),
                ('username', advisingumich.models.UsernameField(db_column=b'ADVSR_UM_UNQNM', max_length=16)),
                ('univ_id', models.CharField(db_column=b'ADVSR_UM_ID', max_length=11)),
                ('first_name', models.CharField(db_column=b'ADVSR_PREF_FIRST_NM', max_length=500)),
                ('last_name', models.CharField(db_column=b'ADVSR_PREF_SURNM', max_length=500)),
            ],
            options={
                'db_table': '"CNLYR002"."DM_ADVSR"',
            },
        ),
        migrations.CreateModel(
            name='AdvisorRole',
            fields=[
                ('id', models.IntegerField(db_column=b'ADVSR_ROLE_KEY', primary_key=True, serialize=False)),
                ('code', models.CharField(db_column=b'ADVSR_ROLE_CD', max_length=4)),
                ('description', models.CharField(db_column=b'ADVSR_ROLE_DES', max_length=30)),
            ],
            options={
                'db_table': '"CNLYR002"."DM_ADVSR_ROLE"',
            },
        ),
        migrations.CreateModel(
            name='Assignment',
            fields=[
                ('id', models.IntegerField(db_column=b'ASSGN_KEY', primary_key=True, serialize=False)),
                ('code', models.CharField(db_column=b'ASSGN_CD', max_length=20)),
                ('description', models.CharField(db_column=b'ASSGN_DES', max_length=50)),
            ],
            options={
                'db_table': '"CNLYR002"."DM_ASSGN"',
            },
        ),
        migrations.CreateModel(
            name='ClassSite',
            fields=[
                ('id', models.IntegerField(db_column=b'CLASS_SITE_KEY', primary_key=True, serialize=False)),
                ('code', models.CharField(db_column=b'CLASS_SITE_CD', max_length=20)),
                ('description', models.CharField(db_column=b'CLASS_SITE_DES', max_length=50)),
            ],
            options={
                'db_table': '"CNLYR002"."DM_CLASS_SITE"',
            },
        ),
        migrations.CreateModel(
            name='ClassSiteTerm',
            fields=[
                ('id', models.IntegerField(db_column=b'CLASS_SITE_TERM_KEY', primary_key=True, serialize=False)),
            ],
            options={
                'db_table': '"CNLYR002"."BG_CLASS_SITE_TERM"',
            },
        ),
        migrations.CreateModel(
            name='Cohort',
            fields=[
                ('id', models.IntegerField(db_column=b'CHRT_KEY', primary_key=True, serialize=False)),
                ('code', models.CharField(db_column=b'CHRT_CD', max_length=20)),
                ('description', models.CharField(db_column=b'CHRT_DES', max_length=50)),
                ('group', models.CharField(db_column=b'CHRT_GRP_NM', max_length=100)),
            ],
            options={
                'db_table': '"CNLYR002"."DM_CHRT"',
            },
        ),
        migrations.CreateModel(
            name='Date',
            fields=[
                ('id', models.IntegerField(db_column=b'DT_KEY', primary_key=True, serialize=False)),
                ('date', models.DateField(db_column=b'CAL_DT')),
            ],
            options={
                'db_table': '"CNLYR001"."DM_DT"',
            },
        ),
        migrations.CreateModel(
            name='EventType',
            fields=[
                ('id', models.IntegerField(db_column=b'EVENT_TYP_KEY', primary_key=True, serialize=False)),
                ('description', models.CharField(db_column=b'EVENT_TYP_NM', max_length=50)),
            ],
            options={
                'db_table': '"CNLYR002"."DM_EVENT_TYP"',
            },
        ),
        migrations.CreateModel(
            name='Mentor',
            fields=[
                ('id', models.IntegerField(db_column=b'MNTR_KEY', primary_key=True, serialize=False)),
                ('username', advisingumich.models.UsernameField(db_column=b'MNTR_UM_UNQNM', max_length=16)),
                ('univ_id', models.CharField(db_column=b'MNTR_UM_ID', max_length=11)),
                ('first_name', models.CharField(db_column=b'MNTR_PREF_FIRST_NM', max_length=500)),
                ('last_name', models.CharField(db_column=b'MNTR_PREF_SURNM', max_length=500)),
            ],
            options={
                'db_table': '"CNLYR002"."DM_MNTR"',
            },
        ),
        migrations.CreateModel(
            name='SourceSystem',
            fields=[
                ('id', models.IntegerField(db_column=b'SRC_SYS_KEY', primary_key=True, serialize=False)),
                ('code', models.CharField(db_column=b'SRC_SYS_CD', max_length=6)),
                ('description', models.CharField(db_column=b'SRC_SYS_NM', max_length=30)),
                ('long_description', models.CharField(db_column=b'SRC_SYS_DES', max_length=30)),
            ],
            options={
                'db_table': '"CNLYR002"."DM_SRC_SYS"',
            },
        ),
        migrations.CreateModel(
            name='Status',
            fields=[
                ('id', models.IntegerField(db_column=b'ACAD_PERF_KEY', primary_key=True, serialize=False)),
                ('code', models.CharField(db_column=b'ACAD_PERF_VAL', max_length=20)),
                ('description', models.CharField(db_column=b'ACAD_PERF_TXT', max_length=50)),
                ('order', models.IntegerField(db_column=b'ACAD_PERF_ORDNL_NBR')),
            ],
            options={
                'ordering': ('order',),
                'db_table': '"CNLYR002"."DM_ACAD_PERF"',
            },
        ),
        migrations.CreateModel(
            name='Student',
            fields=[
                ('id', models.IntegerField(db_column=b'STDNT_KEY', primary_key=True, serialize=False)),
                ('username', advisingumich.models.UsernameField(db_column=b'STDNT_UM_UNQNM', max_length=16)),
                ('univ_id', models.CharField(db_column=b'STDNT_UM_ID', max_length=11)),
                ('first_name', models.CharField(db_column=b'STDNT_PREF_FIRST_NM', max_length=500)),
                ('last_name', models.CharField(db_column=b'STDNT_PREF_SURNM', max_length=500)),
            ],
            options={
                'db_table': '"CNLYR002"."DM_STDNT"',
            },
        ),
        migrations.CreateModel(
            name='Term',
            fields=[
                ('id', models.IntegerField(db_column=b'TERM_KEY', primary_key=True, serialize=False)),
                ('code', models.CharField(db_column=b'TERM_CD', max_length=6)),
                ('description', models.CharField(db_column=b'TERM_DES', max_length=30)),
                ('_begin_date', models.DateField(db_column=b'TERM_BEGIN_DT')),
                ('_end_date', models.DateField(db_column=b'ACAD_TERM_END_DT')),
            ],
            options={
                'db_table': '"CNLYR001"."DM_TERM"',
            },
        ),
        migrations.CreateModel(
            name='ClassSiteScore',
            fields=[
                ('class_site', models.ForeignKey(db_column=b'CLASS_SITE_KEY', on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='advisingumich.ClassSite')),
                ('current_score_average', models.FloatField(db_column=b'CLASS_CURR_SCR_AVG')),
            ],
            options={
                'db_table': '"CNLYR002"."FC_CLASS_SCR"',
            },
        ),
        migrations.CreateModel(
            name='StudentAdvisorRole',
            fields=[
                ('student', models.ForeignKey(db_column=b'STDNT_KEY', on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='advisingumich.Student')),
                ('advisor', models.ForeignKey(db_column=b'ADVSR_KEY', on_delete=django.db.models.deletion.CASCADE, to='advisingumich.Advisor')),
                ('role', models.ForeignKey(db_column=b'ADVSR_ROLE_KEY', on_delete=django.db.models.deletion.CASCADE, to='advisingumich.AdvisorRole')),
            ],
            options={
                'db_table': '"CNLYR002"."BG_STDNT_ADVSR_ROLE"',
            },
        ),
        migrations.CreateModel(
            name='StudentClassSiteAssignment',
            fields=[
                ('student', models.ForeignKey(db_column=b'STDNT_KEY', on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='advisingumich.Student')),
                ('points_possible', models.FloatField(db_column=b'STDNT_ASSGN_PNTS_PSBL_NBR', max_length=10)),
                ('points_earned', models.FloatField(db_column=b'STDNT_ASSGN_PNTS_ERND_NBR', max_length=10)),
                ('class_points_possible', models.FloatField(db_column=b'CLASS_ASSGN_PNTS_PSBL_NBR', max_length=10)),
                ('class_points_earned', models.FloatField(db_column=b'CLASS_ASSGN_PNTS_ERND_NBR', max_length=10)),
                ('included_in_grade', models.CharField(db_column=b'INCL_IN_CLASS_GRD_IND', max_length=1)),
                ('grader_comment', models.CharField(db_column=b'STDNT_ASSGN_GRDR_CMNT_TXT', max_length=4000, null=True)),
                ('weight', models.FloatField(db_column=b'ASSGN_WT_NBR', max_length=126)),
                ('_due_date', models.ForeignKey(db_column=b'ASSGN_DUE_SBMT_DT_KEY', null=True, on_delete=django.db.models.deletion.CASCADE, to='advisingumich.Date')),
            ],
            options={
                'ordering': ('_due_date',),
                'db_table': '"CNLYR002"."FC_STDNT_CLASS_ASSGN"',
            },
            bases=(models.Model, advisingumich.mixins.AdvisingUmichDataCleanupMixin),
        ),
        migrations.CreateModel(
            name='StudentClassSiteScore',
            fields=[
                ('student', models.ForeignKey(db_column=b'STDNT_KEY', on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='advisingumich.Student')),
                ('current_score_average', models.FloatField(db_column=b'STDNT_CURR_SCR_AVG')),
            ],
            options={
                'db_table': '"CNLYR002"."FC_STDNT_CLASS_SCR"',
            },
        ),
        migrations.CreateModel(
            name='StudentClassSiteStatus',
            fields=[
                ('student', models.ForeignKey(db_column=b'STDNT_KEY', on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='advisingumich.Student')),
            ],
            options={
                'ordering': ('status__order',),
                'db_table': '"CNLYR002"."FC_STDNT_CLASS_ACAD_PERF"',
            },
        ),
        migrations.CreateModel(
            name='StudentCohortMentor',
            fields=[
                ('student', models.ForeignKey(db_column=b'STDNT_KEY', on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='advisingumich.Student')),
            ],
            options={
                'db_table': '"CNLYR002"."BG_STDNT_CHRT_MNTR"',
            },
        ),
        migrations.CreateModel(
            name='WeeklyClassSiteScore',
            fields=[
                ('class_site', models.ForeignKey(db_column=b'CLASS_SITE_KEY', on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='advisingumich.ClassSite')),
                ('score', models.IntegerField(db_column=b'CLASS_CURR_SCR_AVG')),
                ('week_end_date', models.ForeignKey(db_column=b'WEEK_END_DT_KEY', on_delete=django.db.models.deletion.CASCADE, to='advisingumich.Date')),
            ],
            options={
                'ordering': ('week_end_date',),
                'db_table': '"CNLYR002"."FC_CLASS_WKLY_SCR"',
            },
        ),
        migrations.CreateModel(
            name='WeeklyStudentClassSiteEvent',
            fields=[
                ('student', models.ForeignKey(db_column=b'STDNT_KEY', on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='advisingumich.Student')),
                ('event_count', models.IntegerField(db_column=b'STDNT_WKLY_EVENT_CNT')),
                ('cumulative_event_count', models.IntegerField(db_column=b'STDNT_CUM_EVENT_CNT')),
                ('percentile_rank', models.FloatField(db_column=b'STDNT_WKLY_PCTL_RNK')),
                ('cumulative_percentile_rank', models.FloatField(db_column=b'STDNT_CUM_PCTL_RNK')),
            ],
            options={
                'ordering': ('week_end_date',),
                'db_table': '"CNLYR002"."FC_STDNT_CLASS_WKLY_EVENT"',
            },
        ),
        migrations.CreateModel(
            name='WeeklyStudentClassSiteScore',
            fields=[
                ('student', models.ForeignKey(db_column=b'STDNT_KEY', on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='advisingumich.Student')),
                ('score', models.IntegerField(db_column=b'STDNT_CURR_SCR_AVG')),
            ],
            options={
                'ordering': ('week_end_date',),
                'db_table': '"CNLYR002"."FC_STDNT_CLASS_WKLY_SCR"',
            },
        ),
        migrations.CreateModel(
            name='WeeklyStudentClassSiteStatus',
            fields=[
                ('student', models.ForeignKey(db_column=b'STDNT_KEY', on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='advisingumich.Student')),
            ],
            options={
                'db_table': '"CNLYR002"."FC_STDNT_CLS_WKLY_ACAD_PRF"',
            },
        ),
        migrations.AddField(
            model_name='eventtype',
            name='source_system',
            field=models.ForeignKey(db_column=b'SRC_SYS_KEY', on_delete=django.db.models.deletion.CASCADE, to='advisingumich.SourceSystem'),
        ),
        migrations.AddField(
            model_name='cohort',
            name='source_system',
            field=models.ForeignKey(db_column=b'SRC_SYS_KEY', on_delete=django.db.models.deletion.CASCADE, to='advisingumich.SourceSystem'),
        ),
        migrations.AddField(
            model_name='classsiteterm',
            name='class_site',
            field=models.ForeignKey(db_column=b'CLASS_SITE_KEY', on_delete=django.db.models.deletion.CASCADE, to='advisingumich.ClassSite'),
        ),
        migrations.AddField(
            model_name='classsiteterm',
            name='term',
            field=models.ForeignKey(db_column=b'TERM_KEY', on_delete=django.db.models.deletion.CASCADE, to='advisingumich.Term'),
        ),
        migrations.AddField(
            model_name='classsite',
            name='source_system',
            field=models.ForeignKey(db_column=b'SRC_SYS_KEY', on_delete=django.db.models.deletion.CASCADE, to='advisingumich.SourceSystem'),
        ),
        migrations.AddField(
            model_name='classsite',
            name='terms',
            field=models.ManyToManyField(through='advisingumich.ClassSiteTerm', to='advisingumich.Term'),
        ),
        migrations.AddField(
            model_name='assignment',
            name='source_system',
            field=models.ForeignKey(db_column=b'SRC_SYS_KEY', on_delete=django.db.models.deletion.CASCADE, to='advisingumich.SourceSystem'),
        ),
        migrations.AddField(
            model_name='weeklystudentclasssitestatus',
            name='class_site',
            field=models.ForeignKey(db_column=b'CLASS_SITE_KEY', on_delete=django.db.models.deletion.CASCADE, to='advisingumich.ClassSite'),
        ),
        migrations.AddField(
            model_name='weeklystudentclasssitestatus',
            name='status',
            field=models.ForeignKey(db_column=b'ACAD_PERF_KEY', on_delete=django.db.models.deletion.CASCADE, to='advisingumich.Status'),
        ),
        migrations.AddField(
            model_name='weeklystudentclasssitestatus',
            name='week_end_date',
            field=models.ForeignKey(db_column=b'WEEK_END_DT_KEY', on_delete=django.db.models.deletion.CASCADE, to='advisingumich.Date'),
        ),
        migrations.AddField(
            model_name='weeklystudentclasssitescore',
            name='class_site',
            field=models.ForeignKey(db_column=b'CLASS_SITE_KEY', on_delete=django.db.models.deletion.CASCADE, to='advisingumich.ClassSite'),
        ),
        migrations.AddField(
            model_name='weeklystudentclasssitescore',
            name='week_end_date',
            field=models.ForeignKey(db_column=b'WEEK_END_DT_KEY', on_delete=django.db.models.deletion.CASCADE, to='advisingumich.Date'),
        ),
        migrations.AddField(
            model_name='weeklystudentclasssiteevent',
            name='class_site',
            field=models.ForeignKey(db_column=b'CLASS_SITE_KEY', on_delete=django.db.models.deletion.CASCADE, to='advisingumich.ClassSite'),
        ),
        migrations.AddField(
            model_name='weeklystudentclasssiteevent',
            name='event_type',
            field=models.ForeignKey(db_column=b'EVENT_TYP_KEY', on_delete=django.db.models.deletion.CASCADE, to='advisingumich.EventType'),
        ),
        migrations.AddField(
            model_name='weeklystudentclasssiteevent',
            name='week_end_date',
            field=models.ForeignKey(db_column=b'WEEK_END_DT_KEY', on_delete=django.db.models.deletion.CASCADE, to='advisingumich.Date'),
        ),
        migrations.AddField(
            model_name='studentcohortmentor',
            name='cohort',
            field=models.ForeignKey(db_column=b'CHRT_KEY', on_delete=django.db.models.deletion.CASCADE, to='advisingumich.Cohort'),
        ),
        migrations.AddField(
            model_name='studentcohortmentor',
            name='mentor',
            field=models.ForeignKey(db_column=b'MNTR_KEY', on_delete=django.db.models.deletion.CASCADE, to='advisingumich.Mentor'),
        ),
        migrations.AddField(
            model_name='studentclasssitestatus',
            name='class_site',
            field=models.ForeignKey(db_column=b'CLASS_SITE_KEY', on_delete=django.db.models.deletion.CASCADE, to='advisingumich.ClassSite'),
        ),
        migrations.AddField(
            model_name='studentclasssitestatus',
            name='status',
            field=models.ForeignKey(db_column=b'ACAD_PERF_KEY', on_delete=django.db.models.deletion.CASCADE, to='advisingumich.Status'),
        ),
        migrations.AddField(
            model_name='studentclasssitescore',
            name='class_site',
            field=models.ForeignKey(db_column=b'CLASS_SITE_KEY', on_delete=django.db.models.deletion.CASCADE, to='advisingumich.ClassSite'),
        ),
        migrations.AddField(
            model_name='studentclasssiteassignment',
            name='assignment',
            field=models.ForeignKey(db_column=b'ASSGN_KEY', on_delete=django.db.models.deletion.CASCADE, to='advisingumich.Assignment'),
        ),
        migrations.AddField(
            model_name='studentclasssiteassignment',
            name='class_site',
            field=models.ForeignKey(db_column=b'CLASS_SITE_KEY', on_delete=django.db.models.deletion.CASCADE, to='advisingumich.ClassSite'),
        ),
        migrations.AddField(
            model_name='student',
            name='class_sites',
            field=models.ManyToManyField(through='advisingumich.StudentClassSiteStatus', to='advisingumich.ClassSite'),
        ),
        migrations.AddField(
            model_name='student',
            name='cohorts',
            field=models.ManyToManyField(through='advisingumich.StudentCohortMentor', to='advisingumich.Cohort'),
        ),
        migrations.AddField(
            model_name='student',
            name='mentors',
            field=models.ManyToManyField(through='advisingumich.StudentCohortMentor', to='advisingumich.Mentor'),
        ),
        migrations.AddField(
            model_name='student',
            name='statuses',
            field=models.ManyToManyField(through='advisingumich.StudentClassSiteStatus', to='advisingumich.Status'),
        ),
        migrations.AddField(
            model_name='mentor',
            name='students',
            field=models.ManyToManyField(through='advisingumich.StudentCohortMentor', to='advisingumich.Student'),
        ),
        migrations.AddField(
            model_name='advisor',
            name='students',
            field=models.ManyToManyField(through='advisingumich.StudentAdvisorRole', to='advisingumich.Student'),
        ),
        migrations.AlterUniqueTogether(
            name='weeklystudentclasssitestatus',
            unique_together=set([('student', 'class_site', 'week_end_date', 'status')]),
        ),
        migrations.AlterUniqueTogether(
            name='weeklystudentclasssitescore',
            unique_together=set([('student', 'class_site', 'week_end_date')]),
        ),
        migrations.AlterUniqueTogether(
            name='weeklystudentclasssiteevent',
            unique_together=set([('student', 'class_site', 'week_end_date')]),
        ),
        migrations.AlterUniqueTogether(
            name='weeklyclasssitescore',
            unique_together=set([('class_site', 'week_end_date')]),
        ),
        migrations.AlterUniqueTogether(
            name='studentcohortmentor',
            unique_together=set([('student', 'cohort', 'mentor')]),
        ),
        migrations.AlterUniqueTogether(
            name='studentclasssitestatus',
            unique_together=set([('student', 'class_site', 'status')]),
        ),
        migrations.AlterUniqueTogether(
            name='studentclasssitescore',
            unique_together=set([('student', 'class_site')]),
        ),
        migrations.AlterUniqueTogether(
            name='studentclasssiteassignment',
            unique_together=set([('student', 'class_site', 'assignment')]),
        ),
        migrations.AlterUniqueTogether(
            name='studentadvisorrole',
            unique_together=set([('student', 'advisor', 'role')]),
        ),
    ]
